// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseProtoClient is the client API for CourseProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseProtoClient interface {
	PostCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*PostCourseReply, error)
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseReply, error)
}

type courseProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseProtoClient(cc grpc.ClientConnInterface) CourseProtoClient {
	return &courseProtoClient{cc}
}

func (c *courseProtoClient) PostCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*PostCourseReply, error) {
	out := new(PostCourseReply)
	err := c.cc.Invoke(ctx, "/course.CourseProto/PostCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseProtoClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseReply, error) {
	out := new(GetCourseReply)
	err := c.cc.Invoke(ctx, "/course.CourseProto/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseProtoServer is the server API for CourseProto service.
// All implementations must embed UnimplementedCourseProtoServer
// for forward compatibility
type CourseProtoServer interface {
	PostCourse(context.Context, *Course) (*PostCourseReply, error)
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseReply, error)
	mustEmbedUnimplementedCourseProtoServer()
}

// UnimplementedCourseProtoServer must be embedded to have forward compatible implementations.
type UnimplementedCourseProtoServer struct {
}

func (UnimplementedCourseProtoServer) PostCourse(context.Context, *Course) (*PostCourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCourse not implemented")
}
func (UnimplementedCourseProtoServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCourseProtoServer) mustEmbedUnimplementedCourseProtoServer() {}

// UnsafeCourseProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseProtoServer will
// result in compilation errors.
type UnsafeCourseProtoServer interface {
	mustEmbedUnimplementedCourseProtoServer()
}

func RegisterCourseProtoServer(s grpc.ServiceRegistrar, srv CourseProtoServer) {
	s.RegisterService(&CourseProto_ServiceDesc, srv)
}

func _CourseProto_PostCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseProtoServer).PostCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseProto/PostCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseProtoServer).PostCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseProto_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseProtoServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseProto/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseProtoServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseProto_ServiceDesc is the grpc.ServiceDesc for CourseProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseProto",
	HandlerType: (*CourseProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCourse",
			Handler:    _CourseProto_PostCourse_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _CourseProto_GetCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course/course.proto",
}
